
=================================
About Doze
=================================

Doze is a very small, but expressive, SQL wrapper, ideal for lightweight tasks,
such as import scripts. It's meant to be fully expressive, and not assume it knows
better than the person programming with it. It's connection agnostic, and doesn't
necessarily require a database connection to build queries. It doesn't assume you
only have one database connection, in contrast, one of it's primary purposes is for
having multiple database connections open at the same time, to a variety of backend
servers (MySQL, PostgreSQL, and SQLite), and performing a variety of tasks to them
simultaneously.

One major goal is to be able to fully express the entirety of the SQL standard,
though the API, while still resembling the SQL language.

Currently, Doze is still in the API drafting stage, which means the API is likely
to change in the future. The tests/ contains many tests for current working API.
It's where you should look if you want to learn how to use it.

Doze has built in support for Server Side Cursors, and asynchronous connections
(although, you can't use them at the same time, due to driver limitations).
Asynchronous support is currently limited to PostgreSQL, due to issues with the
MySQLdb driver (there are a couple pure python implementations of the MySQL
driver which solve this, however, I haven't had the time to look into them).

=================================
Doze Examples
=================================

This is a working example of the Doze API. The API tries to resemble the SQL
language as much as possible:

    import doze
    import doze.backend.pgsql as pgsql

    builder = pgsql.Builder()
    builder.select('a.*, b.somefield').from_('maintable a')\
        .join(pgsql.Join('secondtable b').where(
            pgsql.Where('refid').equals('id', kind=doze.FIELD)))

When no table name / alias is given in the Join object, Doze will automatically
attempt to determine tables.
